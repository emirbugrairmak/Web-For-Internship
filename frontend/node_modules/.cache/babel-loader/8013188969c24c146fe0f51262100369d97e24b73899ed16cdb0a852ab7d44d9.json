{"ast":null,"code":"var _jsxFileName = \"/Users/emirbugrairmak/Desktop/Full-Stack-Project/frontend/src/pages/FilesPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios'; // axios ile backende istek gönderilir.\n\n// Bu sayfa kullanıcının yüklediği dosyaları görüntülemek için kullanılır.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FilesPage() {\n  _s();\n  const [files, setFiles] = useState([]); // files adında bir state değişkeni tanımlar. Başlangıçta boş bir dizi. Bu değişkende kullanıcı dosyalarının listesi tutulacak. setFiles ise files’ı güncellemek için kullanılan fonksiyon.\n  const [error, setError] = useState(''); //dosya yükleme hatası için bir state değişkeni.\n  const [refresh, setRefresh] = useState(false); // Burada başlangıçta refresh değişkeni false yapılıyor. Daha sonra set ile değişiyor. Mesela bir dosya silindikten sonra true olur.\n\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const res = await axios.get('http://localhost:8000/api/files', {\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          }\n        });\n        setFiles(res.data);\n      } catch (err) {\n        setError('Dosyalar alınamadı. Lütfen tekrar giriş yapın.');\n      }\n    };\n    fetchFiles();\n  }, [refresh]);\n  const handleDelete = async id => {\n    // Parametre olarak silinecek dosyanın id’sini alır.\n    try {\n      await axios.delete(`http://localhost:8000/api/files/${id}`, {\n        // dosya silme işlemi için axios ile backende delete isteği atılır.\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('token')\n        }\n      });\n      setRefresh(r => !r);\n    } catch (err) {\n      setError('Dosya silinemedi.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"files-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Y\\xFCkledi\\u011Finiz Dosyalar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [file.filename, \" (\", file.file_type, \") - \", new Date(file.upload_date).toLocaleString(), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(file.id),\n          children: \"Sil\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, file.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(FilesPage, \"eYRQ1n32vrihoGHvyLJIiapCjs8=\");\n_c = FilesPage;\nexport default FilesPage;\nvar _c;\n$RefreshReg$(_c, \"FilesPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","FilesPage","_s","files","setFiles","error","setError","refresh","setRefresh","fetchFiles","res","get","headers","localStorage","getItem","data","err","handleDelete","id","delete","r","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","file","filename","file_type","Date","upload_date","toLocaleString","onClick","_c","$RefreshReg$"],"sources":["/Users/emirbugrairmak/Desktop/Full-Stack-Project/frontend/src/pages/FilesPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios'; // axios ile backende istek gönderilir.\n\n// Bu sayfa kullanıcının yüklediği dosyaları görüntülemek için kullanılır.\n\nfunction FilesPage() { \n  const [files, setFiles] = useState([]);  // files adında bir state değişkeni tanımlar. Başlangıçta boş bir dizi. Bu değişkende kullanıcı dosyalarının listesi tutulacak. setFiles ise files’ı güncellemek için kullanılan fonksiyon.\n  const [error, setError] = useState(''); //dosya yükleme hatası için bir state değişkeni.\n  const [refresh, setRefresh] = useState(false);  // Burada başlangıçta refresh değişkeni false yapılıyor. Daha sonra set ile değişiyor. Mesela bir dosya silindikten sonra true olur.\n\n  useEffect(() => { \n    const fetchFiles = async () => {\n      try {\n        const res = await axios.get('http://localhost:8000/api/files', {\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('token')\n          }\n        });\n        setFiles(res.data);\n      } catch (err) {\n        setError('Dosyalar alınamadı. Lütfen tekrar giriş yapın.');\n      }\n    };\n    fetchFiles();\n  }, [refresh]);\n\n  const handleDelete = async (id) => { // Parametre olarak silinecek dosyanın id’sini alır.\n    try {\n      await axios.delete(`http://localhost:8000/api/files/${id}`, { // dosya silme işlemi için axios ile backende delete isteği atılır.\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('token')\n        }\n      });\n      setRefresh(r => !r);\n    } catch (err) {\n      setError('Dosya silinemedi.');\n    }\n  };\n\n  return (\n    <div className=\"files-container\">\n      <h2>Yüklediğiniz Dosyalar</h2>\n      {error && <p className=\"error\">{error}</p>}\n      <ul>\n        {files.map(file => (\n          <li key={file.id}>\n            {file.filename} ({file.file_type}) - {new Date(file.upload_date).toLocaleString()}\n            <button onClick={() => handleDelete(file.id)}>Sil</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default FilesPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}